void PrintFrame(u32 dump,u32 data, FILE *fp,u32 FrameCounter){
	if ( (dump & 0x1) == 1){
		printf("%04x:%04x \t",GET_MASTERDATA(data),GET_SLAVEDATA(data));
		fprintf(fp,"%04x:%04x \t",GET_MASTERDATA(data),GET_SLAVEDATA(data));
		if ((FrameCounter == 1) || (FrameCounter == 2)){
			printf("|\t");
			fprintf(fp,"|\t");
		}
	}
	return;
}
void resetTradeHandler(TradeHandler s_TradeHandler){
	s_TradeHandler.s_SyncState = SearchState;
	s_TradeHandler.BufferIndex = 0;
	s_TradeHandler.DataFieldActive = 0;

	return;
}


void NewMonitorHandler(u32 dump,u32 data, FILE *fp){
	static u32 FrameCounter =1 ;
	if (FrameCounter == FRAME_LENGTH){
			FrameCounter = 1;
	}else{
			FrameCounter++;
	}
	PrintFrame(dump, data, fp, FrameCounter);
	u16 Masterdata = GET_MASTERDATA(data);
	u16 SlaveData = GET_SLAVEDATA(data);
	SingleDecode(Masterdata, dump, fp, FrameCounter,sTradeHandler[MASTER]);
	FrameCounter = SingleDecode(SlaveData, dump, fp, FrameCounter, sTradeHandler[SLAVE]);
	PrintNewline(FrameCounter, dump, fp);

}
void PrintNewline(u32 FrameCounter, u32 dump,FILE *fp){
	if ((FrameCounter % 9 == 0) && (FrameCounter != 0)){
		if ( (dump & 0x1) == 1){
			printf("\n");
			fprintf(fp,"\n");
		}
	}
}

u32 SingleDecode(u16 data,u32 dump,FILE *fp,u32 FrameCounter,TradeHandler *s_Tradehandler){

	    //printf("FC :%d ",FrameCounter);
		switch(s_Tradehandler[MASTER].s_SyncState){

		case SearchState : {

			if( data == 0xB9A0){
				s_Tradehandler[MASTER].s_SyncState =handshakeState;
			printf("Enter HAndshake State\n");
			}
			return 9;
		}break;
		// Calculate the frame counter depending on the  sysnc state
		case handshakeState :{
			s_Tradehandler.DataHandlerstatus = NoData;
			s_Tradehandler.ExitValue = 0;
			s_Tradehandler.TeamIndex = 0;
			//If data is 8FFF the communication switches to data phase
			if (data == MASTER_HANDSHAKE){
				s_Tradehandler.s_SyncState = DataState;
			printf("Enter Data State\n");
			}else if( data == 0xB9A0){
				s_Tradehandler.s_SyncState = handshakeState;
			}else{
				s_Tradehandler.s_SyncState = SearchState;
			}
			return 9;
		}break;
		//State to handle phase for

		case ExitState : {
			if (data == 0xB9A0){
				printf("In exitstate enter handshake\n");
				s_Tradehandler.s_SyncState = handshakeState;
			}
		}break;
		case BlockRequestHandler : {
			if( FrameCounter == 1){}
			else{
				switch(s_Tradehandler.DataHandlerstatus){
					case NoData :{}break;
						printf("Sollte hier nicht sein\n\n");
					case CaptureData : {
						if(MonitorBlockRequestAnalyser(FrameCounter, data,s_Tradehandler) == Granted){
							s_Tradehandler.DataHandlerstatus = SendData;
						}else{
							s_Tradehandler.DataHandlerstatus = CaptureData;
						}
					}break;

					case SendData : {
						s_Tradehandler.BlockRequest = NoRequest;
						s_Tradehandler.s_SyncState = DataState;
						s_Tradehandler.DataHandlerstatus = NoData;


					}break;
					default : {}break;
					}//end switch
				}
			//return returnvalue;
		}break;

		case InitBlockState : {
			if (FrameCounter ==1 ){
			}else{
				switch(s_Tradehandler.DataHandlerstatus){
				case CaptureData :{
					if(MonitorBlockRequestAnalyser(FrameCounter, data,s_Tradehandler) == Granted){
						s_Tradehandler.DataHandlerstatus = WaitforThread;
					}else{
						s_Tradehandler.DataHandlerstatus = CaptureData;
					}
				}break;
				case WaitforThread :{
						if(FrameCounter == 9){
							s_Tradehandler.TradeCommand = s_Tradehandler.TradeCommandBuffer[0];
							switch (s_Tradehandler.TradeCommand){
							case LINKCMD_SET_MONS_TO_TRADE : {
								s_Tradehandler.ReceivedSpotNumber = s_Tradehandler.TradeCommandBuffer[1];
							}break;//0xDDDD
							case LINKCMD_START_TRADE :{}break; // 0xCCDD
							case LINKCMD_PLAYER_CANCEL_TRADE :{}break; //DDEE
							case LINKCMD_CONFIRM_FINISH_TRADE : {
							}break;//DCBA
							default : {
							}break;
							}//end switch
							s_Tradehandler.s_SyncState = DataState;
							s_Tradehandler.DataHandlerstatus = NoData;
						}else{
							s_Tradehandler.DataHandlerstatus = WaitforThread;
					}
				}break;

				default : {

				}break;
				}//end switch
				//s_Tradehandler.InitBlockSize
			}

		}break;

		case DataState : {
			PrintNewline(FrameCounter, dump,fp);
			switch(FrameCounter){
			case 1: {
			}break;
			case 2: {
				s_Tradehandler.LinkCMD = data;
				switch(data){
					case 0xCCCC : { //REquest Data Block
						s_Tradehandler.BlockRequest = Active;
						s_Tradehandler.DataHandlerstatus = CaptureData;
						printf("New BlockRequest\n");
					}break;
					case 0xBBBB : { //Init Block
						s_Tradehandler.DataHandlerstatus = CaptureData;
					}break;
					case 0x8888 : { // Cont Data Block
					}break;
					case 0x2222 : { // Link CMD Type
						s_Tradehandler.DataHandlerstatus = CaptureData;
						//s_Tradehandler.SendLinkTypeHandler = CaptureData;
					}break;
					case 0xCAFE : { // Hold buttons
					}break;
					case MASTER_HANDSHAKE: { // 8FFF
					}break;
					case 0x5FFF : { // Ready Close Link
					}break;
					case SLAVE_HANDSHAKE : {
								//Detects if the master is still in handshake mode
					}break;
					case 0x0000 :{}break;
					default : {}break;
				}//end switch data
			}break;
			case 3: {
				switch(s_Tradehandler.LinkCMD){

					case 0x0000 : {}break;//Do nothing
					case 0xB9A0 : {}break;//Do nothing
					case 0x8FFF : {}break;//Do nothing
					case 0x2222 : {// Determine the Link Type
						s_Tradehandler.LinkType = data;
						s_Tradehandler.BlockRequestSize = BLOCK_SIZE_60;
						s_Tradehandler.s_SyncState = BlockRequestHandler;
						printf("Send Link Typ\n");
					}break;
					case 0xCCCC : { // determine the requested Block Size
						s_Tradehandler.BlockRequestSize = data;
						s_Tradehandler.s_SyncState = BlockRequestHandler;
					}break;
					case 0xBBBB : {
						s_Tradehandler.InitBlockSize = data;
						s_Tradehandler.s_SyncState = InitBlockState;
					}break;
					case 0x8888 : {}break;
					case 0xCAFE : {// Determine pressed buttons from MAster
						s_Tradehandler.PressedButtons = data;
					}break;
					case 0x5FFF : {
						s_Tradehandler.s_SyncState = ExitState;
					}break;
					default : {}break;
				}// end switch LINKCMD
			}break;
			case 4 ... 9:{}break;
			default : {

			}break;
			}//end switch Framecounter

		}break;

		default : {}break;
		}///end switch syncstate
		//printf("FC : %d ",FrameCounter);
		return FrameCounter;
}
RequestStatus InitBlockAnalyser(u32 Framecounter, u16 data,TradeHandler s_Tradehandler){
		if (Framecounter == 1){}
		else if( Framecounter == 2){
			if( data == 0x8888){
				s_Tradehandler.DataFieldActive = 1;
			}
			else{
				s_Tradehandler.DataFieldActive = 0;
			}
		}else{
			if ( s_Tradehandler.DataFieldActive == 1){
				if ( s_Tradehandler.BufferIndex < 10 ){
					s_Tradehandler.TradeCommandBuffer[s_Tradehandler.BufferIndex++] = data;
				}else{
					if( Framecounter == 9){
						s_Tradehandler.DataFieldActive = 0;
						s_Tradehandler.BufferIndex = 0;
						printf("Init Block Analyser Finished\n");
						return Granted;
					}
				}
			}
		}
		return Pending;
}


RequestStatus MonitorBlockRequestAnalyser(u32 Framecounter,u16 data, TradeHandler s_Tradehandler){
		//Function which safes the received Pokemondata(Master) in a corresponding data structure

		if (Framecounter == 1){//ignore
		}
		else if( Framecounter == 2){
			if( data == 0x8888){
				s_Tradehandler.DataFieldActive = 1;
			}
			else{
				s_Tradehandler.DataFieldActive = 0;
			}
		}
		else{
			if ( s_Tradehandler.DataFieldActive == 1){

				switch(s_Tradehandler.BlockRequestSize){

				case BLOCK_REQ_SIZE_200 :{
					if ( s_Tradehandler.BufferIndex < 50 ){
						s_Tradehandler.PokemonTeam[s_Tradehandler.TeamIndex][s_Tradehandler.BufferIndex++] = data;
					}else if ((s_Tradehandler.BufferIndex >= 50) && (s_Tradehandler.BufferIndex < 100)){
						s_Tradehandler.PokemonTeam[s_Tradehandler.TeamIndex+1][(s_Tradehandler.BufferIndex++)-50] = data;
					}else{
						if( Framecounter == 9){
							s_Tradehandler.DataFieldActive = 0;
							s_Tradehandler.BufferIndex = 0;
							s_Tradehandler.TeamIndex = (s_Tradehandler.TeamIndex + 2);
							if(s_Tradehandler.TeamIndex > 5){
								s_Tradehandler.TeamIndex = 0;
							}
							printf("Block Analyser finished\n");
							return Granted;
						}
					}
				}break;
				case BLOCK_REQ_SIZE_100 : {
					if ( s_Tradehandler.BufferIndex < 50 ){
						s_Tradehandler.TrainerCard[s_Tradehandler.BufferIndex++] = data;
					}else{
						if( Framecounter == 9){
							s_Tradehandler.DataFieldActive = 0;
							s_Tradehandler.BufferIndex = 0;
							printf("Block Analyser finished\n");
							return Granted;
						}
					}
				}break;

				case BLOCK_REQ_SIZE_220 : {
					if(s_Tradehandler.BufferIndex < 110){
						s_Tradehandler.LetterBuffer[s_Tradehandler.BufferIndex++] = data;
					}else{
						if( Framecounter == 9){
							s_Tradehandler.DataFieldActive = 0;
							s_Tradehandler.BufferIndex= 0;
							printf("Block Analyser finished\n");
							return Granted;
						}
					}
				}break;
				case BLOCK_REQ_SIZE_40 : {
					if(s_Tradehandler.BufferIndex < 20){
						s_Tradehandler.RibbonsBuffer[s_Tradehandler.BufferIndex++] = data;
					}
					else{
						if( Framecounter == 9){
							s_Tradehandler.DataFieldActive = 0;
							s_Tradehandler.BufferIndex = 0;
							printf("Block Analyser finished\n");
							return Granted;
						}
					}
				}
				case BLOCK_SIZE_60 : {
					if(s_Tradehandler.BufferIndex < 30){
						s_Tradehandler.InitialBuffer[s_Tradehandler.BufferIndex++] = data;
					}
					else{
						if(Framecounter == 9){
							s_Tradehandler.DataFieldActive = 0;
							s_Tradehandler.BufferIndex = 0;
							printf("Block Analyser finished\n");
							return Granted;
						}
					}
				}break;
				case BLOCK_SIZE_20 : {
						if ( s_Tradehandler.BufferIndex < 10 ){
								s_Tradehandler.TradeCommandBuffer[s_Tradehandler.BufferIndex++] = data;
						}else{
							if( Framecounter == 9){
								s_Tradehandler.DataFieldActive = 0;
								s_Tradehandler.BufferIndex = 0;
								printf("Init Block Analyser Finished\n");
								return Granted;
							}
						}
				}break;
				default : {

				}break;
				}//end switch;
			}
		}
		return Pending;
	}

static struct TradeHandler sTradeHandler[2];

static u32 frameCount = 1;		//count variable for formating the monitoring output and also used for interpreting data


void MonitorHandler(u32 data,u32 dump,FILE *fp){

	static s_SystemState s_NextState = TransitionState;	//FSM state vaiable

	//if(checkFrameDuration()==1){return;}

	switch(s_NextState){
	case IdleState:{
		if ( (dump & 0x1) == 1){
			printf("%04x:%04x  \n",GET_MASTERDATA(data),GET_SLAVEDATA(data));
			fprintf(fp,"%04x:%04x  \n",GET_MASTERDATA(data),GET_SLAVEDATA(data));
		}
		if(GET_MASTERDATA(data) == MASTER_HANDSHAKE){
			s_NextState = TradingState;
			frameCount = 0;
			for(u32 i = MASTER;i<= SLAVE;i++){
				sTradeHandler[i].ReadyCloseLink = 0;
				sTradeHandler[i].DataIndex = 0; sTradeHandler[i].TeamIndex = 0;
				sTradeHandler[i].BlockRequestSize = 0;
				sTradeHandler[i].InitBlockSize = 0;
				sTradeHandler[i].InitBlock = 0;
				sTradeHandler[i].BlockRequest = 0;
			}
			printf("Entering Trading State\n");
		}
	}break;
	case TradingState:{

		switch(frameCount){
				case 0:{
					if ( GET_MASTERDATA(data) != GET_SLAVEDATA(data) ){
						printBlankspace("Checksum not matching\n");
					}
				}break;//case0 framecount


				case 1:{
					//----------------------------------------------------------------------
					//Check control frames which are sent. F.E 2222,BBBB,CCCC,5FFF,2FFE,CAFE,
					sTradeHandler[MASTER].LinkCMD = GET_MASTERDATA(data);
					sTradeHandler[SLAVE].LinkCMD = GET_SLAVEDATA(data);

					switch(sTradeHandler[MASTER].LinkCMD){
						case LINKCMD_SEND_LINK_TYPE:{//2222
							printBlankspace("Send Link Type\n");
						}break;
						case LINKCMD_READY_CLOSE_LINK:{//5FFF
							sTradeHandler[MASTER].ReadyCloseLink = 1;
							if((sTradeHandler[MASTER].ReadyCloseLink && sTradeHandler[SLAVE].ReadyCloseLink) == 1){
								s_NextState = TransitionState;
								printBlankspace("Ready close Link -> Transition state\n");
								sTradeHandler[MASTER].ReadyCloseLink = 0;
								sTradeHandler[SLAVE].ReadyCloseLink = 0;
							}
						}break;
						case LINKCMD_SEND_BLOCK_REQ:{//CCCC
							printBlankspace("Send Block Request\n");
							sTradeHandler[MASTER].BlockRequest = 1;
							sTradeHandler[SLAVE].BlockRequest = 1;
						}break;
						case LINKCMD_INIT_BLOCK:{//BBBB
							printBlankspace("Init Block\n");
							sTradeHandler[MASTER].DataIndex = 0;
							sTradeHandler[MASTER].InitBlock = 1;
						}break;
						case LINKCMD_CONT_BLOCK:{//8888
							//implement
							printBlankspace("Cont Block\n");
							sTradeHandler[SLAVE].ContBlock = 1;
						}break;
						case LINKCMD_SEND_HELD_KEYS:{//CAFE

						}break;
						case 0x0000:{
							sTradeHandler[MASTER].DataIndex = 0;
						}break;
						default:break;
					}//end switch
					//---------------------------------------------------------------------------
					switch(sTradeHandler[SLAVE].LinkCMD){
					case LINKCMD_READY_CLOSE_LINK:{//5FFF
						sTradeHandler[SLAVE].ReadyCloseLink = 1;
						if((sTradeHandler[MASTER].ReadyCloseLink && sTradeHandler[SLAVE].ReadyCloseLink) == 1){
							s_NextState = TransitionState;
							printBlankspace("Ready close Link -> Transition state\n");
							sTradeHandler[MASTER].ReadyCloseLink = 0;
							sTradeHandler[SLAVE].ReadyCloseLink = 0;
						}
					}break;
					case LINKCMD_INIT_BLOCK:{//BBBB
						if (sTradeHandler[MASTER].LinkCMD != LINKCMD_INIT_BLOCK){
							printBlankspace("Init Block\n");
						}
						sTradeHandler[SLAVE].DataIndex = 0;
						sTradeHandler[SLAVE].InitBlock = 1;

					}break;
					case LINKCMD_CONT_BLOCK:{//8888
						//implement
						if (sTradeHandler[MASTER].LinkCMD != LINKCMD_CONT_BLOCK){
							printBlankspace("Cont Block \n");
							sTradeHandler[SLAVE].ContBlock = 1;
						}
					}break;
					case 0x0000:{
						sTradeHandler[SLAVE].DataIndex = 0;
					}break;
					default:break;
					}
				}break;//case1 framecount
				//--------------------------------------------------------------------------------------

				//Case2 -------------------------------------------------------------------------------
				case 2:{
					switch(sTradeHandler[MASTER].LinkCMD){
					case LINKCMD_SEND_BLOCK_REQ:{//CCCC
						sTradeHandler[MASTER].BlockRequestSize = GET_MASTERDATA(data);
						sTradeHandler[SLAVE].BlockRequestSize = GET_MASTERDATA(data);
						//printf("RequestBlockSize : %d \n",sTradeHandler[MASTER].BlockRequestSize);
						//printBlankspace("");
					}break;
					case LINKCMD_SEND_LINK_TYPE:{//2222
						sTradeHandler[MASTER].LinkType = GET_MASTERDATA(data);
					}break;
					case LINKCMD_INIT_BLOCK:{//BBBB
						sTradeHandler[MASTER].InitBlockSize = GET_MASTERDATA(data);
						//printf("InitBlockSize : %d \n",sTradeHandler[MASTER].InitBlockSize);
						//printBlankspace("");
					}break;
					case LINKCMD_CONT_BLOCK:{//8888
						updateBuffer(MASTER,data);
					}break;

					default:break;
					}//end switch Master case 2
					//-------------------------------------------------------------------------------------
					switch(sTradeHandler[SLAVE].LinkCMD){
					case LINKCMD_SEND_BLOCK_REQ:{//CCCC
						//Should not occur

					}break;
					case LINKCMD_INIT_BLOCK:{//BBBB
						sTradeHandler[SLAVE].InitBlockSize = GET_SLAVEDATA(data);
					}break;
					case LINKCMD_CONT_BLOCK:{
						//process data

						updateBuffer(SLAVE, data);
					}break;
					default:break;
					}//end switch Slave case 2


				}break;//case2 framecount
				//------------------------------------------------------------------------------------------
				case 3 ... 8:{
					if (sTradeHandler[MASTER].LinkCMD == LINKCMD_CONT_BLOCK){
						updateBuffer(MASTER,data);
					}
					if (sTradeHandler[SLAVE].LinkCMD == LINKCMD_CONT_BLOCK){

						updateBuffer(1,data);
					}
				}break;
				default:break;
				}//end switch case statemachine
				//------------------------------------------------------------------------------------------
				printDataFrame(dump,data,fp);
	}break;
	case TransitionState:{
		if(GET_MASTERDATA(data) == SLAVE_HANDSHAKE){
			s_NextState = IdleState;
			printf("Entering Handshake state\n");
			frameCount = 0;
		}
		//printf("In Transition ");
		printDataFrame(dump,data,fp);
	}break;

	default:break;
	}//end switch NexState Variable
	return;
}

void printDataFrame(u32 dump,u32 data,FILE *fp){
	if ( (dump & 0x1) == 1){
		printf("%04x:%04x \t",GET_MASTERDATA(data),GET_SLAVEDATA(data));
		fprintf(fp,"%04x:%04x \t",GET_MASTERDATA(data),GET_SLAVEDATA(data));
		if ((FrameCounter == 1) || (FrameCounter == 0)){
			printf("|\t");
			fprintf(fp,"|\t");
		}
	}

	if ((FrameCounter % 8 == 0) && (FrameCounter != 0)){
		if ( (dump & 0x1) == 1){
			printf("\n");
			fprintf(fp,"\n");
		}
		FrameCounter = 0;
	}
	else{
		FrameCounter++;
	}
	return;
}





		switch(FrameCounter){
				case 1:{
					if ( GET_MASTERDATA(data) != GET_SLAVEDATA(data) ){
						printBlankspace("Checksum not matching\n");
					}
				}break;//case1 FrameCounter
				case 2:{
					//----------------------------------------------------------------------
					//Check control frames which are sent. F.E 2222,BBBB,CCCC,5FFF,2FFE,CAFE,
					sTradeHandler[MASTER].LinkCMD = GET_MASTERDATA(data);
					sTradeHandler[SLAVE].LinkCMD = GET_SLAVEDATA(data);

					switch(sTradeHandler[MASTER].LinkCMD){
						case LINKCMD_SEND_LINK_TYPE:{//2222
							printBlankspace("Send Link Type\n");
							sTradeHandler[MASTER].BlockRequest = Active;
							sTradeHandler[SLAVE].BlockRequest = Active;
							sTradeHandler[MASTER].DataFieldActive = NoRequest;
							sTradeHandler[MASTER].BufferIndex = 0;
							sTradeHandler[SLAVE].DataFieldActive  = NoRequest;
							sTradeHandler[SLAVE].BufferIndex = 0;
						}break;
						case LINKCMD_READY_CLOSE_LINK:{//5FFF
							sTradeHandler[MASTER].ReadyCloseLink = 1;
							if((sTradeHandler[MASTER].ReadyCloseLink && sTradeHandler[SLAVE].ReadyCloseLink) == 1){
								s_NextState = RequestExitState;
								printBlankspace("Ready close Link -> Transition state\n");
								sTradeHandler[MASTER].ReadyCloseLink = 0;
								sTradeHandler[SLAVE].ReadyCloseLink = 0;
							}
						}break;
						case LINKCMD_SEND_BLOCK_REQ:{//CCCC
							printBlankspace("Send Block Request\n");
							printf("Send Block Request\n");
							sTradeHandler[MASTER].BlockRequest = Active;
							sTradeHandler[SLAVE].BlockRequest = Active;
							sTradeHandler[MASTER].DataFieldActive = NoRequest;
							sTradeHandler[MASTER].BufferIndex = 0;
							sTradeHandler[SLAVE].DataFieldActive  = NoRequest;
							sTradeHandler[SLAVE].BufferIndex = 0;
						}break;
						case LINKCMD_INIT_BLOCK:{//BBBB
							printBlankspace("Init Block\n");
							sTradeHandler[MASTER].DataIndex = 0;
							sTradeHandler[MASTER].InitBlock = 1;
						}break;
						default:{}break;
					}//end switch
					//---------------------------------------------------------------------------
					switch(sTradeHandler[SLAVE].LinkCMD){
					case LINKCMD_READY_CLOSE_LINK:{//5FFF
						sTradeHandler[SLAVE].ReadyCloseLink = 1;
						if((sTradeHandler[MASTER].ReadyCloseLink && sTradeHandler[SLAVE].ReadyCloseLink) == 1){
							s_NextState = RequestExitState;
							printBlankspace("Ready close Link -> Transition state\n");
							sTradeHandler[MASTER].ReadyCloseLink = 0;
							sTradeHandler[SLAVE].ReadyCloseLink = 0;
						}
					}break;
					case LINKCMD_INIT_BLOCK:{//BBBB
						if (sTradeHandler[MASTER].LinkCMD != LINKCMD_INIT_BLOCK){
							printBlankspace("Init Block\n");
						}
						sTradeHandler[SLAVE].DataIndex = 0;
						sTradeHandler[SLAVE].InitBlock = 1;

					}break;
					default:{}break;
					}
				}break;//case2 Controllfield FrameCounter
				//--------------------------------------------------------------------------------------

				//Case3 -------------------------------------------------------------------------------
				case 3:{
					switch(sTradeHandler[MASTER].LinkCMD){
					case LINKCMD_SEND_BLOCK_REQ:{//CCCC
						sTradeHandler[MASTER].BlockRequestSize = GET_MASTERDATA(data);
						sTradeHandler[SLAVE].BlockRequestSize = GET_MASTERDATA(data);
						s_NextState = BlockRequestState;
						//printf("RequestBlockSize : %d \n",sTradeHandler[MASTER].BlockRequestSize);
						//printBlankspace("");
					}break;
					case LINKCMD_SEND_LINK_TYPE:{//2222
						sTradeHandler[MASTER].LinkType = GET_MASTERDATA(data);
						sTradeHandler[MASTER].BlockRequestSize = BLOCK_SIZE_60;
						sTradeHandler[SLAVE].BlockRequestSize = BLOCK_SIZE_60;
						s_NextState = BlockRequestState;
					}break;
					case LINKCMD_INIT_BLOCK:{//BBBB
						sTradeHandler[MASTER].InitBlockSize = GET_MASTERDATA(data);
						//printf("InitBlockSize : %d \n",sTradeHandler[MASTER].InitBlockSize);
					}break;
					default:{}break;
					}//end switch Master case 2
					//-------------------------------------------------------------------------------------
					switch(sTradeHandler[SLAVE].LinkCMD){
					case LINKCMD_INIT_BLOCK:{//BBBB
						sTradeHandler[SLAVE].InitBlockSize = GET_SLAVEDATA(data);
					}break;
					default:{}break;
					}//end switch Slave case 2


				}break;//case2 FrameCounter
				default:break;
				}//end switch case statemachine
				//------------------------------------------------------------------------------------------
