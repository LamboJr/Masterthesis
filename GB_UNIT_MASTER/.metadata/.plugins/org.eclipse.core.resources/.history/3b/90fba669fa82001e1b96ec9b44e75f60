#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>

#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"

#include "structs.h"
#include "constant.h"
#include "functions.h"

#define FrameMask 0xFFFF0000

char char_conv( u8 character,u16 language);


void decode_Pokemon_data(u16 *Pokemonbuffer){
    struct Pokemon Pokemonteststructure;
    Pokemonteststructure = decode_Pokemon_structure(Pokemonbuffer);
    struct Growth growth;
    uint8_t offset32 = 0;
    uint8_t offset16 = 0;
    uint8_t offset8 = 0;

    growth.species = ((uint16_t *) Pokemonteststructure.data)[0];
    growth.held_item = ((uint16_t *) Pokemonteststructure.data)[1];
    growth.experience = ((uint32_t *) Pokemonteststructure.data)[1];
    growth.pp_bonus.move1 = Pokemonteststructure.data[8] & 0x3;
    growth.pp_bonus.move2 = (Pokemonteststructure.data[8] >>2 ) & 0x3;
    growth.pp_bonus.move3 = (Pokemonteststructure.data[8] >>4 ) & 0x3;
    growth.pp_bonus.move4 = (Pokemonteststructure.data[8] >>6 ) & 0x3;
    growth.friendship = Pokemonteststructure.data[9];

    struct Attacks attacks;
    offset8 = 12;
    offset16 = 6;
    attacks.moves[0] = ((uint16_t *)Pokemonteststructure.data)[offset16++];
    attacks.moves[1] = ((uint16_t *)Pokemonteststructure.data)[offset16++];
    attacks.moves[2] = ((uint16_t *)Pokemonteststructure.data)[offset16++];
    attacks.moves[3] = ((uint16_t *)Pokemonteststructure.data)[offset16++];
    attacks.pp[0] = Pokemonteststructure.data[8+offset8];
    attacks.pp[1] = Pokemonteststructure.data[9+offset8];
    attacks.pp[2] = Pokemonteststructure.data[10+offset8];
    attacks.pp[3] = Pokemonteststructure.data[11+offset8];

    struct Condition condition;

    offset8 = 24;
    condition.hp_ev = Pokemonteststructure.data[offset8++];
    condition.attack_ev = Pokemonteststructure.data[offset8++];
    condition.defense_ev = Pokemonteststructure.data[offset8++];
    condition.speed_ev = Pokemonteststructure.data[offset8++];
    condition.special_attack_ev = Pokemonteststructure.data[offset8++];
    condition.special_defense_ev = Pokemonteststructure.data[offset8++];
    condition.coolness = Pokemonteststructure.data[offset8++];
    condition.beauty = Pokemonteststructure.data[offset8++];
    condition.cuteness = Pokemonteststructure.data[offset8++];
    condition.smartness = Pokemonteststructure.data[offset8++];
    condition.toughness = Pokemonteststructure.data[offset8++];
    condition.feel = Pokemonteststructure.data[offset8++];

    offset16 = 18;
    offset32 = 9;
    struct Misc misc;

    misc.pokerus.days_remaining = Pokemonteststructure.data[offset8] & 0xF;
    misc.pokerus.strain = (Pokemonteststructure.data[offset8++] >> 4) &0xF;
    misc.met_location = Pokemonteststructure.data[offset8++];
    offset16++;

    uint16_t tempData16 = ((uint16_t *)Pokemonteststructure.data)[offset16++];
    offset32++;

    misc.origins.level_met = tempData16 & 0x7F;
    misc.origins.game_met = (tempData16 >> 7) & 0xF;
    misc.origins.pokeball_type = (tempData16 >>4) & 0xF;
    misc.origins.trainer_gender = (tempData16 >> 4) & 0x1;

    uint32_t tempData32 = ((uint32_t *)Pokemonteststructure.data)[offset32++];

    misc.ivs.hp = tempData32 & 0x1F;
    misc.ivs.attack = (tempData32 >> 5) & 0x1F;
    misc.ivs.defense = (tempData32 >> 5) & 0x1F;
    misc.ivs.speed = (tempData32 >> 5) & 0x1F;
    misc.ivs.special_attack = (tempData32 >> 5) & 0x1F;
    misc.ivs.special_defense = (tempData32 >> 5) & 0x1F;
    misc.ivs.egg = (tempData32 >> 5) & 0x1;
    misc.ivs.ability = (tempData32 >> 1) & 0x1;

    tempData32 = ((uint32_t *)Pokemonteststructure.data)[offset32];

    misc.ribbons.cool = tempData32 & 0x7;
    misc.ribbons.beauty = (tempData32 >> 3)  & 0x7;
    misc.ribbons.cute = (tempData32 >> 3)  & 0x7;
    misc.ribbons.smart = (tempData32 >> 3)  & 0x7;
    misc.ribbons.tough = (tempData32 >> 3)  & 0x7;
    misc.ribbons.champion = (tempData32 >> 3)  & 0x1;
    misc.ribbons.winning = (tempData32 >> 1)  & 0x1;
    misc.ribbons.victory= (tempData32 >> 1)  & 0x1;
    misc.ribbons.artist= (tempData32 >> 1)  & 0x1;
    misc.ribbons.effort= (tempData32 >> 1)  & 0x1;
    misc.ribbons.special1= (tempData32 >> 1)  & 0x1;
    misc.ribbons.special2= (tempData32 >> 1)  & 0x1;
    misc.ribbons.special3= (tempData32 >> 1)  & 0x1;
    misc.ribbons.special4= (tempData32 >> 1)  & 0x1;
    misc.ribbons.special5= (tempData32 >> 1)  & 0x1;
    misc.ribbons.special6= (tempData32 >> 1)  & 0x1;

    misc.ribbons.padding= (tempData32 >> 1)  & 0x1F;
    misc.ribbons.obedience= (tempData32 >> 5)  & 0x1;




    Pokemonteststructure = decode_Pokemon_data(Pokemonbuffer);
    assert(Pokemonteststructure.personality == 0x41f30002);
    assert(Pokemonteststructure.trainer_id == 0x06A64753);
    assert(strcmp(Pokemonteststructure.nickname,"Kyogre")== 0);
    assert(Pokemonteststructure.language == 0x0205);
    assert(strcmp(Pokemonteststructure.trainer_name,"Lambo")== 0);
    assert(Pokemonteststructure.markings == 0);
    assert(Pokemonteststructure.checksum == 0x1089);
    assert(Pokemonteststructure.unknown == 0);
    assert(Pokemonteststructure.status == 0);
    assert(Pokemonteststructure.level == 100);
    assert(Pokemonteststructure.pokerus = 0xFF);
    assert(Pokemonteststructure.current_health == 0x155);
    assert(Pokemonteststructure.max_health == 0x155);
    assert(Pokemonteststructure.attack == 0xb8);
    assert(Pokemonteststructure.defense == 0xd8);
    assert(Pokemonteststructure.speed == 0x117);
    assert(Pokemonteststructure.special_attack ==0x1b6);
    assert(Pokemonteststructure.special_defense == 0x13c);

    return;
}

