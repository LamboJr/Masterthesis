/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xgpio.h"
#include "xil_types.h"
#include "xparameters.h"
#include <stdint.h>

//#include "decode_trainer_data.h"
#include "decode_Pokemon_structure.h"
#include "constant.h"
#include "decodeTrainderCard.h"
//#include "FSM.h"
//#include "reducedFSM.h"
#include "LinkTrade.h"
//#include "structs.h"

//#include "testdata.h"
#include "TestDataTrade.h"

//#define USE_TEST_DATA

#define MasterMask 0xFFFF0000
#define SlaveMask 0x0000FFFF

#define SWITCH1(buffer) (buffer) & 0x1
#define SWITCH2(buffer) (buffer) & 0x2
#define SWITCH3(buffer) (buffer) & 0x4
#define SWITCH4(buffer) (buffer) & 0x8

//AXI GPIO
#define PL_TO_PS_BUFFER_DEVICE_ID XPAR_AXI_GPIO_PLTOPS_DEVICE_ID
#define PL_TO_PS_BUFFER_CHANNEL 1
#define PL_TO_PS_BUFFER_MASK 0xFFFFFFFF

#define PS_TO_PL_BUFFER_DEVICE_ID XPAR_AXI_GPIO_PSTOPL_DEVICE_ID
#define PS_TO_PL_BUFFER_CHANNEL 1
#define PS_TO_PL_BUFFER_MASK 0xFFFFFFFF

#define DATA_DIRECTION_OUTPUT 0
#define DATA_DIRECTION_INPUT 1

#define SWITCH3_BITMASK 0x1
#define ADDR_OFFSET_EMPTY 1

#define TRADE

#define UPDATE_TEAM 1

#define TEAM_SPOT_1 2
#define TEAM_SPOT_2 3
#define TEAM_SPOT_3 4
#define TEAM_SPOT_4 5
#define TEAM_SPOT_5 6
#define TEAM_SPOT_6 7

#define MODE_TRADE 0
#define MODE_MONITOR 1

	u32 pokemonbuffer[50] = {0x0002, 0x41f3, 0x4753, 0x06a6, 0xedc5, 0xdbe3, 0xd9e6, 0xffff,
			 0xffff, 0x0205, 0xd5c6, 0xd6e1, 0xffe3, 0x00ff, 0x1089, 0x0000,
			 0x4706, 0x4616, 0x476b, 0x47e3, 0x4d5b, 0x4d5f, 0xb851, 0x2693,
			 0xbb4e, 0x78aa, 0x8e75, 0xc75a, 0x46c5, 0x4630, 0x5581, 0x4746,
			 0xb8ae, 0x4755, 0x4751, 0xbb55, 0x47ad, 0xb8aa, 0xb8ae, 0x47aa,
			 0x0000, 0x0000, 0xff64, 0x0155, 0x0155, 0x00b8, 0x00d8, 0x0117,
			 0x01b6, 0x013c};
	u32 Cyndaquil_pokemonbuffer[50] = {
	 0x0002, 0x41f3, 0x4753, 0x06a6, 0xedbd, 0xd8e2, 0xe5d5, 0xdde9,
	 0xffe0, 0x0205, 0xd5c6, 0xd6e1, 0xffe3, 0x00ff, 0x7857, 0x0000,
	 0x470d, 0x4760, 0x47bc, 0x47e3, 0x4d5b, 0x4d5f, 0xb851, 0x25d0,
	 0xbb2e, 0x78ba, 0x8e75, 0xc75a, 0x47ca, 0x4782, 0x5581, 0x4746,
	 0xb8ae, 0x4755, 0x47cd, 0x2355, 0x47ad, 0xb8aa, 0xb8ae, 0x47aa,
	 0x0000, 0x0000, 0xff32, 0x0086, 0x0086, 0x0034, 0x003f, 0x0062,
	 0x007a, 0x0046};
	u32 Totodile_pokemonbuffer[50] = {
	 0x0001, 0x41f2, 0x4753, 0x06a6, 0xe3ce, 0xe3e8, 0xddd8, 0xd9e0,
	 0xffff, 0x0205, 0xd5c6, 0xd6e1, 0xffe3, 0x00ff, 0x1186, 0x0000,
	 0xbb52, 0xbb54, 0x4352, 0xb8ab, 0xb8ad, 0x47ab, 0xb852, 0x25d1,
	 0xb8ad, 0x78ab, 0x8e76, 0xc75b, 0x4770, 0x464c, 0x4774, 0x475a,
	 0x4d58, 0x4d5e, 0x47cc, 0x4785, 0x5582, 0x4747, 0xb8ad, 0x4754,
	 0x0000, 0x0000, 0xff32, 0x007d, 0x007d, 0x0080, 0x0054, 0x005f,
	 0x0039, 0x0045};
	u32 Chikorita_pokemonbuffer[50] = {
	 0x0004, 0x41f1, 0x4753, 0x06a6, 0xdcbd, 0xdfdd, 0xe6e3, 0xe8dd,
	 0xffd5, 0x0205, 0xd5c6, 0xd6e1, 0xffe3, 0x00ff, 0x7806, 0x0000,
	 0x47cf, 0x47e4, 0x5587, 0x4744, 0xb8a8, 0x4757, 0xb857, 0x25d2,
	 0xbb48, 0x78a8, 0x8e73, 0xc758, 0x471e, 0x479d, 0x470b, 0x47bc,
	 0x4d5d, 0x4d5d, 0x47ab, 0x47cb, 0x2357, 0xb8a8, 0xb8a8, 0x47a8,
	 0x0000, 0x0000, 0xff32, 0x0098, 0x0098, 0x0030, 0x0069, 0x0041,
	 0x0045, 0x006b};

	u32 Scizor_pokemonbuffer[50] = {
	 0x0003, 0x0000, 0x4753, 0x06a6, 0xd7cd, 0xeedd, 0xe6e3, 0xffff,
	 0xffff, 0x0205, 0xd5c6, 0xd6e1, 0xffe3, 0x00ff, 0x126f, 0x0000,
	 0x4784, 0x062b, 0x5580, 0x06b5, 0xb8af, 0x06a6, 0xbbac, 0x06a6,
	 0x4750, 0xf959, 0xb8af, 0x0659, 0xb850, 0x6423, 0xb8af, 0x3959,
	 0x8e74, 0x86a9, 0x475e, 0x0680, 0x4783, 0x06c4, 0x4d5a, 0x0cac,
	 0x0000, 0x0000, 0xff64, 0x0158, 0x0158, 0x018a, 0x00ec, 0x00a6,
	 0x0083, 0x00c4};

	u32 Skarmory_pokemonbuffer[50] = {
	 0x0017, 0x0000, 0x4753, 0x06a6, 0xdfcd, 0xe6d5, 0xe3e1, 0xede6,
	 0xffff, 0x0205, 0xd5c6, 0xd6e1, 0xffe3, 0x00ff, 0x12c2, 0x0000,
	 0xb844, 0x6423, 0xb8bb, 0x3959, 0x8e60, 0x86a9, 0x47b8, 0x06a2,
	 0xbb44, 0xf959, 0xb8bb, 0x0659, 0x47fb, 0x06fa, 0x4756, 0x06e7,
	 0x4d4e, 0x0cac, 0x47a7, 0x066e, 0x5594, 0x06b5, 0xb8bb, 0x06a6,
	 0x0000, 0x0000, 0xff64, 0x014e, 0x014e, 0x00c4, 0x013d, 0x00b0,
	 0x0068, 0x0106};


int main(){

	//Config of the AXI Gpio Controller
	XGpio_Config *cfg_ptr;
	XGpio PL_TO_PS_BUFFER_Device;
	XGpio PS_TO_PL_BUFFER_Device;

	//Initialize the PL to PS buffer
	cfg_ptr = XGpio_LookupConfig(PL_TO_PS_BUFFER_DEVICE_ID);
	XGpio_CfgInitialize(&PL_TO_PS_BUFFER_Device, cfg_ptr, cfg_ptr->BaseAddress);
	XGpio_SetDataDirection(&PL_TO_PS_BUFFER_Device, PL_TO_PS_BUFFER_CHANNEL, DATA_DIRECTION_INPUT);
	//Data Direction = 1 for input

	cfg_ptr = XGpio_LookupConfig(PS_TO_PL_BUFFER_DEVICE_ID);
	XGpio_CfgInitialize(&PS_TO_PL_BUFFER_Device, cfg_ptr, cfg_ptr->BaseAddress);
	XGpio_SetDataDirection(&PS_TO_PL_BUFFER_Device, PS_TO_PL_BUFFER_CHANNEL, DATA_DIRECTION_OUTPUT);

	u32 __attribute__ ((unused)) *address = NULL;  //address pointer to read/write from/to BRAM controller -> ringbuffer

    address = (u32 *) XPAR_AXI_BRAM_CTRL_0_S_AXI_BASEADDR;  // address points to BASE ADDR of AXI BRAM controller

	u32 data;			//variable for storing red in data
	u32 dump;

	u32 Mode = MODE_TRADE;
	u32 FrameCounterValue = 0;
	u32 PrevCounterValue = 0;
    init_platform();


//#undef USE_TEST_DATA

#ifdef TRADE

    XGpio_DiscreteWrite(&PS_TO_PL_BUFFER_Device, PS_TO_PL_BUFFER_CHANNEL,Mode);
    xil_printf("Start Trading emulator\n");
    while(1){
    	FrameCounterValue = XGpio_DiscreteRead(&PL_TO_PS_BUFFER_Device, PL_TO_PS_BUFFER_CHANNEL);
    	//if(FrameCounterValue != PrevCounterValue){
    		xil_printf("FrameCounterValue : %08x\n",FrameCounterValue);
    		//PrevCounterValue = FrameCounterValue;

    	//}

    }

/*    while(1){

    	if (*(address+ADDR_OFFSET_EMPTY) == 0){ // checks the empty flag of the ringbuffer Hardware to indicate if there is new data to read from HW
    		data = *(address);
    		//reads from the ringbuffer if its not empty
    		dump = XGpio_DiscreteRead(&PL_TO_PS_BUFFER_Device, PL_TO_PS_BUFFER_CHANNEL);
    		N_updateFSM(data,dump);

    	}

    }*/



#else

#ifdef USE_TEST_DATA
        print("Start Monitoring \n");
    dump = 1;
    dump = XGpio_DiscreteRead(&PL_TO_PS_BUFFER_Device, PL_TO_PS_BUFFER_CHANNEL);
    u32 sizearray = (sizeof(TestDataTrade)/(sizeof(u32)));
    xil_printf("Size of Array : %ld\n",sizearray);
    for(size_t i = 0;i< sizearray;i++){
    	data = TestDataTrade[i];
    	N_updateFSM(data, dump);
    }
    print("\n\nFinished test loop \n\n");

#else

    while(1){

    	if (*(address+ADDR_OFFSET_EMPTY) == 0){ // checks the empty flag of the ringbuffer Hardware to indicate if there is new data to read from HW
    		data = *(address);
    		//reads from the ringbuffer if its not empty
    		dump = XGpio_DiscreteRead(&PL_TO_PS_BUFFER_Device, PL_TO_PS_BUFFER_CHANNEL);
    		N_updateFSM(data,dump);

    	}
    }
#endif
#endif
    cleanup_platform();
    return 0;
}

