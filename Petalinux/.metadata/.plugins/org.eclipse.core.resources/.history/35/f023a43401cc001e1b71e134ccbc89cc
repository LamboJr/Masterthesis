#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>
#include <sys/mman.h>
#include <fcntl.h>


#define ADDRESS_PL_TO_PS 0x41200000

#define ADDRESS_PS_TO_PL 0x41210000

#define ADDRESS_RINGBUFFER 0x40000000
void usage(char *prog)
{
	printf("usage: %s ADDR\n",prog);
	printf("\n");
	printf("ADDR may be specified as hex values\n");
}

uint32_t ReadPltoPsBuffer(int fd){
//	;
	void *ptr;
	uint32_t addr = ADDRESS_PL_TO_PS;
	unsigned page_addr, page_offset;
	unsigned page_size=sysconf(_SC_PAGESIZE);

	page_addr=(addr & ~(page_size-1));
	page_offset=addr-page_addr;
	ptr=mmap(NULL,page_size,PROT_READ,MAP_SHARED,fd,(addr & ~(page_size-1)));
	if((int)ptr==-1) {
		perror("mmap Error\n");
		exit(-1);
	}
	//printf("0x%08x\n",*((unsigned *)(ptr+page_offset)));
	return *((unsigned *)(ptr+page_offset));

}

void WritePStoPLBffer(uint32_t value,int fd)
{
	void *ptr;
	uint32_t addr = ADDRESS_PS_TO_PL;
	unsigned page_addr, page_offset;
	unsigned page_size=sysconf(_SC_PAGESIZE);

	page_addr=(addr & ~(page_size-1));
	page_offset=addr-page_addr;

	ptr=mmap(NULL,page_size,PROT_READ|PROT_WRITE,MAP_SHARED,fd,(addr & ~(page_size-1)));
	if((int)ptr==-1) {
		perror("Error mmap WritePStoPl\n");
		exit(-1);
	}

	*((unsigned *)(ptr+page_offset))=value;
	return ;
}


void WriteToRingbuffer(uint32_t value,int fd){
	void *ptr;
	uint32_t addr = ADDRESS_RINGBUFFER;
	unsigned page_addr, page_offset;
	unsigned page_size=sysconf(_SC_PAGESIZE);


	page_addr=(addr & ~(page_size-1));
	page_offset=addr-page_addr;

	ptr=mmap(NULL,page_size,PROT_READ|PROT_WRITE,MAP_SHARED,fd,(addr & ~(page_size-1)));
	if((int)ptr==-1) {
		perror("Error mmap WritetoRingbuffer\n");
		exit(-1);
	}

	*((unsigned *)(ptr+page_offset))=value;
	return;
}

uint32_t ReadfromRingbuffer(int fd){
	void *ptr;
	uint32_t addr = ADDRESS_RINGBUFFER;
	unsigned page_addr, page_offset;
	unsigned page_size=sysconf(_SC_PAGESIZE);
	page_addr=(addr & ~(page_size-1));
	page_offset=addr-page_addr;
	ptr=mmap(NULL,page_size,PROT_READ|PROT_WRITE,MAP_SHARED,fd,(addr & ~(page_size-1)));
	if((int)ptr==-1) {
		perror("Error mmap ReadtoRingbuffer\n");
		exit(-1);
	}
	return *((unsigned *)(ptr+page_offset));
}

int main(int argc, char *argv[])
{
	int fd;
	fd=open("/dev/mem",O_RDWR);
		if(fd<1) {
			perror("Error open FD in WriteToRingbuffer\n");
			exit(-1);
	}

	uint32_t PsToPlValue = 0x00000000;
	uint32_t OutputData = 0xB9A0;
	uint32_t Inputdata;

	uint32_t PLtoPSBuffer_Value = ReadPltoPsBuffer(fd);
	printf("PltoPSBuffer Value : %08x\n",PLtoPSBuffer_Value);

	WritePStoPLBffer(PsToPlValue,fd);

	Inputdata = ReadfromRingbuffer(fd);
	WriteToRingbuffer(OutputData,fd);
	printf("Ringbuffer data : %08x\n",Inputdata);
	return 0;
}
