#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>
#include <sys/mman.h>
#include <fcntl.h>

#include "Hardwarehandler.h"


#define ADDRESS_PL_TO_PS 0x41200000

#define ADDRESS_PS_TO_PL 0x41210000

#define BASE_ADDRESS_RINGBUFFER 0x40000000
#define ADDRESS_OFFSET_FREERINGBUFFER 0x1

void* InitPLtoPSBuffer(int fd){
	void *ptr;
	uint32_t addr = ADDRESS_PL_TO_PS;
	//unsigned page_addr, page_offset;
	unsigned page_size=sysconf(_SC_PAGESIZE);

//	page_addr=(addr & ~(page_size-1));
//	page_offset=addr-page_addr;
	ptr=mmap(NULL,page_size,PROT_READ,MAP_SHARED,fd,(addr & ~(page_size-1)));
	if((int)ptr==-1) {
		perror("mmap Error\n");
		exit(-1);
	}
	return ptr;
}

uint32_t ReadPltoPsBuffer(void *ptr){
	return *((unsigned *)(ptr));
}

void* InitPStoPLBuffer(int fd){
	void *ptr;
	uint32_t addr = ADDRESS_PS_TO_PL;
	//unsigned page_addr, page_offset;
	unsigned page_size=sysconf(_SC_PAGESIZE);
//	page_addr=(addr & ~(page_size-1));
//	page_offset=addr-page_addr;
	ptr=mmap(NULL,page_size,PROT_WRITE,MAP_SHARED,fd,(addr & ~(page_size-1)));
	if((int)ptr==-1) {
		perror("Error mmap WritePStoPl\n");
		exit(-1);
	}
	return ptr;
}
void WritePStoPLBffer(void *ptr,uint32_t value)
{
	*((unsigned *)(ptr))=value;
	return;
}


void WriteToRingbuffer(void *Ringbufferptr,uint32_t value,uint32_t addressoffset){
	uint32_t page_offset = addressoffset*4;
	*((uint32_t *)(Ringbufferptr+page_offset))=value;
	return;
}

uint32_t ReadRingbuffer(void *Ringbufferptr,uint32_t addressoffset){
	uint32_t page_offset = addressoffset*4;//Page offset is byte addressable. but Ringbuffer is only 32 bit adressable.
	return *((uint32_t *)(Ringbufferptr+page_offset));
}

void* InitRingbufferMMap(int fd){
	void *Ringbufferptr;
	uint32_t addr = BASE_ADDRESS_RINGBUFFER;
	//uint32_t page_addr, page_offset;
	uint32_t page_size=sysconf(_SC_PAGESIZE);
//	page_addr=(addr & ~(page_size-1));
//	page_offset=(addr-page_addr)*4;
	Ringbufferptr = mmap(NULL,page_size,PROT_READ|PROT_WRITE,MAP_SHARED,fd,(addr & ~(page_size-1)));
	if((int)Ringbufferptr==-1) {
		perror("Error mmap ReadtoRingbuffer =>");
		exit(-1);
	}
	return Ringbufferptr;
}
