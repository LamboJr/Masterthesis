#include "../Includes/DataTypes.h"
#include <stdio.h>


#include "../Includes/Link.h"

#include "../Includes/linkcommand.h"
#include "../Includes/decodeTrainderCard.h"
#include "../Includes/DecodePokemonData.h"
#include "../Includes/MonitorTrade.h"
#include "../Includes/constant.h"

static struct TradeHandler sTradeHandler[2];

static u32 FrameCounter = 1;		//count variable for formating the monitoring output and also used for interpreting data


void MonitorHandler(u32 data,u32 dump,FILE *fp){

	//static s_SystemState s_NextState = TransitionState;	//FSM state vaiable
	static SyncState s_NextState = handshakeState;
	//if(checkFrameDuration()==1){return;}

	PrintFrame(data, fp);
	switch(s_NextState){
	case handshakeState:{
		FrameCounter = FRAME_LENGTH ;
		if(GET_MASTERDATA(data) == MASTER_HANDSHAKE){
			printf("\n");
			s_NextState = DataState;

			TradehandlerReset(&sTradeHandler[MASTER]);
			TradehandlerReset(&sTradeHandler[SLAVE]);
			printf("Entering Trading State\n");
		}
	}break;
	case DataState:{

		if(sTradeHandler[MASTER].s_NextdataState == IdendificationState){
			switch(FrameCounter){
			case 1:{
				if ( GET_MASTERDATA(data) != GET_SLAVEDATA(data) ){
					printBlankspace("Checksum not matching\n");
				}
			}break;//case1 FrameCounter
			case 2:{
			//----------------------------------------------------------------------
			//Check control frames which are sent. F.E 2222,BBBB,CCCC,5FFF,2FFE,CAFE,
			sTradeHandler[MASTER].LinkCMD = GET_MASTERDATA(data);
			switch(sTradeHandler[MASTER].LinkCMD){
				case LINKCMD_SEND_LINK_TYPE:{//2222
					printBlankspace("Send Link Type\n");
					sTradeHandler[MASTER].BlockRequest = Active;
					sTradeHandler[SLAVE].BlockRequest = Active;
					sTradeHandler[MASTER].DataFieldActive = NoRequest;
					sTradeHandler[MASTER].BufferIndex = 0;
					sTradeHandler[SLAVE].DataFieldActive  = NoRequest;
					sTradeHandler[SLAVE].BufferIndex = 0;
				}break;
				case LINKCMD_READY_CLOSE_LINK:{//5FFF
					sTradeHandler[MASTER].ReadyCloseLink = 1;
					if((sTradeHandler[MASTER].ReadyCloseLink && sTradeHandler[SLAVE].ReadyCloseLink) == 1){
						s_NextState = RequestExitState;
						printBlankspace("Ready close Link -> Transition state\n");
						sTradeHandler[MASTER].ReadyCloseLink = 0;
						sTradeHandler[SLAVE].ReadyCloseLink = 0;
					}
				}break;
				case LINKCMD_SEND_BLOCK_REQ:{//CCCC
					printBlankspace("Send Block Request\n");
					printf("Send Block Request\n");
					sTradeHandler[MASTER].BlockRequest = Active;
					sTradeHandler[SLAVE].BlockRequest = Active;
					sTradeHandler[MASTER].DataFieldActive = NoRequest;
					sTradeHandler[MASTER].BufferIndex = 0;
					sTradeHandler[SLAVE].DataFieldActive  = NoRequest;
					sTradeHandler[SLAVE].BufferIndex = 0;
				}break;
				case LINKCMD_INIT_BLOCK:{//BBBB
					printBlankspace("Init Block\n");
					sTradeHandler[MASTER].BlockRequest = Active;
					sTradeHandler[MASTER].BufferIndex = 0;
					sTradeHandler[MASTER].DataFieldActive  = NoRequest;
				}break;
				default:{}break;
				}//end switch

			}break;//case2 Controllfield FrameCounter
			//Case3 -------------------------------------------------------------------------------
			case 3:{
				switch(sTradeHandler[MASTER].LinkCMD){
				case LINKCMD_SEND_BLOCK_REQ:{//CCCC
					sTradeHandler[MASTER].BlockRequestSize = GET_MASTERDATA(data);
					sTradeHandler[SLAVE].BlockRequestSize = GET_MASTERDATA(data);
					s_NextState = BlockRequestState;
					//printf("RequestBlockSize : %d \n",sTradeHandler[MASTER].BlockRequestSize);
					//printBlankspace("");
				}break;
				case LINKCMD_SEND_LINK_TYPE:{//2222
					sTradeHandler[MASTER].LinkType = GET_MASTERDATA(data);
					sTradeHandler[MASTER].BlockRequestSize = BLOCK_SIZE_60;
					sTradeHandler[SLAVE].BlockRequestSize = BLOCK_SIZE_60;
					s_NextState = BlockRequestState;
				}break;
				case LINKCMD_INIT_BLOCK:{//BBBB
					sTradeHandler[MASTER].InitBlockSize = GET_MASTERDATA(data);
					//printf("InitBlockSize : %d \n",sTradeHandler[MASTER].InitBlockSize);
				}break;
				default:{}break;
				}//end switch Master case 2

			}break;//case2 FrameCounter
			default:{}break;
			}//end switch case statemachine
			//------------------------------------------------------------------------------------------


		//if DataStateState Master == BlockSendState
		}else{
			if (MonitorBlockRequestAnalyser(FrameCounter, GET_MASTERDATA(data), &sTradeHandler[MASTER]) == Granted){
				sTradeHandler[MASTER].s_NextdataState = IdendificationState;
			}
		}

		if(sTradeHandler[MASTER].s_NextdataState == IdendificationState){
			switch(FrameCounter){
				case 1:{
					if ( GET_MASTERDATA(data) != GET_SLAVEDATA(data) ){
						printBlankspace("Checksum not matching\n");
					}
				}break;//case1 FrameCounter
				case 2:{
					sTradeHandler[SLAVE].LinkCMD = GET_SLAVEDATA(data);
					switch(sTradeHandler[SLAVE].LinkCMD){
					case LINKCMD_READY_CLOSE_LINK:{//5FFF
						sTradeHandler[SLAVE].ReadyCloseLink = 1;
						if((sTradeHandler[MASTER].ReadyCloseLink && sTradeHandler[SLAVE].ReadyCloseLink) == 1){
							s_NextState = RequestExitState;
							printBlankspace("Ready close Link -> Transition state\n");
							sTradeHandler[MASTER].ReadyCloseLink = 0;
							sTradeHandler[SLAVE].ReadyCloseLink = 0;
						}
					}break;
					case LINKCMD_INIT_BLOCK:{//BBBB
						if (sTradeHandler[MASTER].LinkCMD != LINKCMD_INIT_BLOCK){
							printBlankspace("Init Block\n");
						}
						sTradeHandler[SLAVE].DataIndex = 0;
						sTradeHandler[SLAVE].InitBlock = 1;

					}break;
					default:{}break;
					}
				}break;//case2 Controllfield FrameCounter
				case 3:{
					switch(sTradeHandler[SLAVE].LinkCMD){
					case LINKCMD_INIT_BLOCK:{//BBBB
						sTradeHandler[SLAVE].InitBlockSize = GET_SLAVEDATA(data);
					}break;
					default:{}break;
					}//end switch Slave case 2

				}break;//case2 FrameCounter
				default:break;
			}//end switch case statemachine

		}
		else{
			if (MonitorBlockRequestAnalyser(FrameCounter, GET_SLAVEDATA(data), &sTradeHandler[SLAVE]) == Granted ){
				sTradeHandler[SLAVE].s_NextdataState = IdendificationState;
			}
		}


		switch(FrameCounter){
				case 1:{
					if ( GET_MASTERDATA(data) != GET_SLAVEDATA(data) ){
						printBlankspace("Checksum not matching\n");
					}
				}break;//case1 FrameCounter
				case 2:{
					//----------------------------------------------------------------------
					//Check control frames which are sent. F.E 2222,BBBB,CCCC,5FFF,2FFE,CAFE,
					sTradeHandler[MASTER].LinkCMD = GET_MASTERDATA(data);
					sTradeHandler[SLAVE].LinkCMD = GET_SLAVEDATA(data);

					switch(sTradeHandler[MASTER].LinkCMD){
						case LINKCMD_SEND_LINK_TYPE:{//2222
							printBlankspace("Send Link Type\n");
							sTradeHandler[MASTER].BlockRequest = Active;
							sTradeHandler[SLAVE].BlockRequest = Active;
							sTradeHandler[MASTER].DataFieldActive = NoRequest;
							sTradeHandler[MASTER].BufferIndex = 0;
							sTradeHandler[SLAVE].DataFieldActive  = NoRequest;
							sTradeHandler[SLAVE].BufferIndex = 0;
						}break;
						case LINKCMD_READY_CLOSE_LINK:{//5FFF
							sTradeHandler[MASTER].ReadyCloseLink = 1;
							if((sTradeHandler[MASTER].ReadyCloseLink && sTradeHandler[SLAVE].ReadyCloseLink) == 1){
								s_NextState = RequestExitState;
								printBlankspace("Ready close Link -> Transition state\n");
								sTradeHandler[MASTER].ReadyCloseLink = 0;
								sTradeHandler[SLAVE].ReadyCloseLink = 0;
							}
						}break;
						case LINKCMD_SEND_BLOCK_REQ:{//CCCC
							printBlankspace("Send Block Request\n");
							printf("Send Block Request\n");
							sTradeHandler[MASTER].BlockRequest = Active;
							sTradeHandler[SLAVE].BlockRequest = Active;
							sTradeHandler[MASTER].DataFieldActive = NoRequest;
							sTradeHandler[MASTER].BufferIndex = 0;
							sTradeHandler[SLAVE].DataFieldActive  = NoRequest;
							sTradeHandler[SLAVE].BufferIndex = 0;
						}break;
						case LINKCMD_INIT_BLOCK:{//BBBB
							printBlankspace("Init Block\n");
							sTradeHandler[MASTER].DataIndex = 0;
							sTradeHandler[MASTER].InitBlock = 1;
						}break;
						default:{}break;
					}//end switch
					//---------------------------------------------------------------------------
					switch(sTradeHandler[SLAVE].LinkCMD){
					case LINKCMD_READY_CLOSE_LINK:{//5FFF
						sTradeHandler[SLAVE].ReadyCloseLink = 1;
						if((sTradeHandler[MASTER].ReadyCloseLink && sTradeHandler[SLAVE].ReadyCloseLink) == 1){
							s_NextState = RequestExitState;
							printBlankspace("Ready close Link -> Transition state\n");
							sTradeHandler[MASTER].ReadyCloseLink = 0;
							sTradeHandler[SLAVE].ReadyCloseLink = 0;
						}
					}break;
					case LINKCMD_INIT_BLOCK:{//BBBB
						if (sTradeHandler[MASTER].LinkCMD != LINKCMD_INIT_BLOCK){
							printBlankspace("Init Block\n");
						}
						sTradeHandler[SLAVE].DataIndex = 0;
						sTradeHandler[SLAVE].InitBlock = 1;

					}break;
					default:{}break;
					}
				}break;//case2 Controllfield FrameCounter
				//--------------------------------------------------------------------------------------

				//Case3 -------------------------------------------------------------------------------
				case 3:{
					switch(sTradeHandler[MASTER].LinkCMD){
					case LINKCMD_SEND_BLOCK_REQ:{//CCCC
						sTradeHandler[MASTER].BlockRequestSize = GET_MASTERDATA(data);
						sTradeHandler[SLAVE].BlockRequestSize = GET_MASTERDATA(data);
						s_NextState = BlockRequestState;
						//printf("RequestBlockSize : %d \n",sTradeHandler[MASTER].BlockRequestSize);
						//printBlankspace("");
					}break;
					case LINKCMD_SEND_LINK_TYPE:{//2222
						sTradeHandler[MASTER].LinkType = GET_MASTERDATA(data);
						sTradeHandler[MASTER].BlockRequestSize = BLOCK_SIZE_60;
						sTradeHandler[SLAVE].BlockRequestSize = BLOCK_SIZE_60;
						s_NextState = BlockRequestState;
					}break;
					case LINKCMD_INIT_BLOCK:{//BBBB
						sTradeHandler[MASTER].InitBlockSize = GET_MASTERDATA(data);
						//printf("InitBlockSize : %d \n",sTradeHandler[MASTER].InitBlockSize);
					}break;
					default:{}break;
					}//end switch Master case 2
					//-------------------------------------------------------------------------------------
					switch(sTradeHandler[SLAVE].LinkCMD){
					case LINKCMD_INIT_BLOCK:{//BBBB
						sTradeHandler[SLAVE].InitBlockSize = GET_SLAVEDATA(data);
					}break;
					default:{}break;
					}//end switch Slave case 2


				}break;//case2 FrameCounter
				default:break;
				}//end switch case statemachine
				//------------------------------------------------------------------------------------------

	}break;

	case BlockRequestState : {
		if ( sTradeHandler[MASTER].BlockRequest == Active){
			if (MonitorBlockRequestAnalyser(FrameCounter, GET_MASTERDATA(data), &sTradeHandler[MASTER]) == Granted){
				sTradeHandler[MASTER].BlockRequest = Granted;
			}
		}
		if (sTradeHandler[SLAVE].BlockRequest == Active){
			if (MonitorBlockRequestAnalyser(FrameCounter, GET_SLAVEDATA(data), &sTradeHandler[SLAVE]) == Granted ){
				sTradeHandler[SLAVE].BlockRequest = Granted;
			}
		}
		if((sTradeHandler[MASTER].BlockRequest == Granted) && (sTradeHandler[SLAVE].BlockRequest == Granted)){
			s_NextState = DataState;
			printf("Exit BlockRequest Handler\n");
		}

	}break;

	case RequestExitState:{
		if(GET_MASTERDATA(data) == SLAVE_HANDSHAKE){
			s_NextState = handshakeState;
			printf("Entering Handshake state\n");
			FrameCounter = FRAME_LENGTH;
		}
		//printf("In Transition ");

	}break;

	default:{}break;
	}//end switch NexState Variable
	PrintNewline(fp);
	UpdateFrameCounter();
	return;
}

void updateBuffer(u8 MSC,u32 data){
	//printf("InitBlock : %d,BlockRequest : %d, TeamIndex : %d,BlockRequestSize :%04x",sTradeHandler[MSC].InitBlock,sTradeHandler[MSC].BlockRequest,sTradeHandler[MSC].TeamIndex,sTradeHandler[MSC].BlockRequestSize);
	if(sTradeHandler[MSC].InitBlock == 1 ){ //Checks if Block was initializes with BBBB
		if(sTradeHandler[MSC].BlockRequest == 1){ //Checks if Block was Requested from master with CCCC
			if(sTradeHandler[MSC].TeamIndex <6 && sTradeHandler[MSC].BlockRequestSize == 1){ //Checks if Pokemon structure was Requested

				if(sTradeHandler[MSC].DataIndex < (sTradeHandler[MSC].InitBlockSize/2)){
					//Cehcks if Master or Slave Buffer has to be updated
					if(MSC == MASTER){	sTradeHandler[MSC].TempBuffer[sTradeHandler[MSC].DataIndex] = GET_MASTERDATA(data);}
					else{	sTradeHandler[MSC].TempBuffer[sTradeHandler[MSC].DataIndex] = GET_SLAVEDATA(data);}
					//printf("Debug:%d ",sTradeHandler[MSC].DataIndex);
					sTradeHandler[MSC].DataIndex++;  //Increase buffer index after succesfully storing data in it
				}else{
					//If Buffer is full
					sTradeHandler[MSC].InitBlock  = 0;
					//printf("\n");
					//Copy temporary buffer in the coresponding Teambuffer in the struct field
					for(size_t i =0;i<POKEMON_BUFFER_LENGTH;i++){
						sTradeHandler[MSC].PokemonTeam[sTradeHandler[MSC].TeamIndex][i] = sTradeHandler[MSC].TempBuffer[i];
						//printf("Team[%d][%ld] = %04x\n ",sTradeHandler[MSC].TeamIndex,i,sTradeHandler[MSC].PokemonTeam[sTradeHandler[MSC].TeamIndex][i]);
					}
					//PRINTMS(MSC)
					//printf("Pokemon Spot %d\n",sTradeHandler[MSC].TeamIndex+1);
/*					if(MSC == MASTER){printf("Master Pokemon Spot %d\n",sTradeHandler[MSC].TeamIndex+1);}
					else{printf("Slave Pokemon Spot %d\n",sTradeHandler[MSC].TeamIndex+1);}*/
					//decode_Pokemon_data(sTradeHandler[MSC].PokemonTeam[sTradeHandler[MSC].TeamIndex]);
					sTradeHandler[MSC].TeamIndex++; //update TeamIndex
					for(size_t i = 0;i<POKEMON_BUFFER_LENGTH;i++){
						sTradeHandler[MSC].PokemonTeam[sTradeHandler[MSC].TeamIndex][i] = sTradeHandler[MSC].TempBuffer[i+50];
						//printf("Team[%d][%ld] = %04x\n ",sTradeHandler[MSC].TeamIndex,i,sTradeHandler[MSC].PokemonTeam[sTradeHandler[MSC].TeamIndex][i]);
					}
					//PRINTMS(MSC)
					//printf("Pokemon Spot %d\n",sTradeHandler[MSC].TeamIndex+1);
					//printf("DEBUG\n");
					//decode_Pokemon_data(sTradeHandler[MSC].PokemonTeam[sTradeHandler[MSC].TeamIndex]);
					sTradeHandler[MSC].TeamIndex++;

					//There are always send two Pokemon at once
					printBlankspace("");
					if( sTradeHandler[MSC].TeamIndex >= 6){
						//Reset the control signals
						sTradeHandler[MSC].TeamIndex = 0;
						sTradeHandler[MSC].BlockRequest= 0;
					}
				}
			}//Teamindex <6 && BlockRequestsize == 1
			else if (sTradeHandler[MSC].BlockRequestSize == 2){
				if(sTradeHandler[MSC].DataIndex < (sTradeHandler[MSC].InitBlockSize/2)){
							//Cehcks if Master or Slave Buffer has to be updated
							if(MSC == MASTER){
								sTradeHandler[MSC].TempBuffer[sTradeHandler[MSC].DataIndex] = GET_MASTERDATA(data);
							}
							else{
								sTradeHandler[MSC].TempBuffer[sTradeHandler[MSC].DataIndex] = GET_SLAVEDATA(data);
							}
							//printf("Debug:%d ",sTradeHandler[MSC].DataIndex);
							sTradeHandler[MSC].DataIndex++;  //Increase buffer index after succesfully storing data in it
				}else{
					sTradeHandler[MSC].InitBlock  = 0;
					//printf("\n");
					//Copy temporary buffer in the coresponding Teambuffer in the struct field
					for(size_t i =0;i<TRAINER_BUFFER_SIZE;i++){
						sTradeHandler[MSC].TrainerCard[i] = sTradeHandler[MSC].TempBuffer[i];
						//printf("Team[%d][%ld] = %04x\n ",sTradeHandler[MSC].TeamIndex,i,sTradeHandler[MSC].PokemonTeam[sTradeHandler[MSC].TeamIndex][i]);
					}
					if(MSC == MASTER){//printf("Master TrainerCard\n");

					}
					else{//printf("Slave TrainerCard\n");

					}
					//decodeTrainerCard(sTradeHandler[MSC].TrainerCard);


					//There are always send two Pokemon at once
					printBlankspace("");
						//Reset the control signals
					sTradeHandler[MSC].BlockRequest= 0;

				}// end If data index small enough
			}//Block REquestSize == 2
			else if(sTradeHandler[MSC].BlockRequestSize == 3){
				sTradeHandler[MSC].BlockRequest= 0;
			}//end Block Request Size == 3
			else if (sTradeHandler[MSC].BlockRequestSize == 4){
				sTradeHandler[MSC].BlockRequest= 0;
			}//end  Block Request Size = 4

		}//end BlockRequest == 1
		else{
			//Case for Trading sync data
			if(sTradeHandler[MSC].InitBlockSize == 20){
				if(sTradeHandler[MSC].DataIndex < (sTradeHandler[MSC].InitBlockSize/2)){
					if ( MSC == MASTER){sTradeHandler[MSC].TempBuffer[sTradeHandler[MSC].DataIndex] = GET_MASTERDATA(data);}
					else{sTradeHandler[MSC].TempBuffer[sTradeHandler[MSC].DataIndex] = GET_SLAVEDATA(data);}
					sTradeHandler[MSC].DataIndex++;
				}else{
					sTradeHandler[MSC].InitBlock  = 0;
					//printf("\n");
					sTradeHandler[MSC].LinkCMD = sTradeHandler[MSC].TempBuffer[0];
					//PRINTMS(MSC)
					//printf("Command : %04x\n",sTradeHandler[MSC].LinkCMD);

//					switch (sTradeHandler[MSC].LinkCMD){
//						CASEPRINT(LINKCMD_READY_TO_TRADE)
//						CASEPRINT(LINKCMD_READY_FINISH_TRADE)
//						CASEPRINT(LINKCMD_READY_CANCEL_TRADE)
//						CASEPRINT(LINKCMD_START_TRADE)
//						CASEPRINT(LINKCMD_CONFIRM_FINISH_TRADE)
//						CASEPRINT(LINKCMD_SET_MONS_TO_TRADE)
//						CASEPRINT(LINKCMD_PLAYER_CANCEL_TRADE)
//						CASEPRINT(LINKCMD_REQUEST_CANCEL)
//						CASEPRINT(LINKCMD_BOTH_CANCEL_TRADE)
//						CASEPRINT(LINKCMD_PARTNER_CANCEL_TRADE)
//						CASEPRINT(LINKCMD_NONE)
//
//						default:break;
//					}//end switch Link CMD
					printBlankspace("");
				}
			}

		}//end No Block Request
	}//InitBlock ==1
	return;
}

void printBlankspace(char* text){
#ifdef DEBUG_STATES
	char* blankspace = "                    \t\t";
	printf("%s",text);
	for(int i = 0;i<FrameCounter;i++){
		printf("%s",blankspace);
	}

#endif
}


void UpdateFrameCounter(){
	if (FrameCounter == FRAME_LENGTH){
			FrameCounter = 1;
	}else{
			FrameCounter++;
	}
	return;
}
void PrintNewline(FILE *fp){

	if ((FrameCounter % 9 == 0) && (FrameCounter != 0)){
	printf("\n");

	fprintf(fp,"\n");

	}
	return;
}

void PrintFrame(u32 data, FILE *fp){
		printf("%04x:%04x    ",GET_MASTERDATA(data),GET_SLAVEDATA(data));
		fprintf(fp,"%04x:%04x    ",GET_MASTERDATA(data),GET_SLAVEDATA(data));
		if ((FrameCounter == 1) || (FrameCounter == 2)){
			printf("|    ");
			fprintf(fp,"|    ");
		}
	return;
}

void TradehandlerReset(TradeHandler* sTradeHandler){
	sTradeHandler->ReadyCloseLink = 0;
	sTradeHandler->DataIndex = 0;
	sTradeHandler->TeamIndex = 0;
	sTradeHandler->BlockRequestSize = 0;
	sTradeHandler->InitBlockSize = 0;
	sTradeHandler->InitBlock = 0;
	sTradeHandler->BlockRequest = 0;
	sTradeHandler->DataFieldActive = NoRequest;
	sTradeHandler->BufferIndex = 0;
	sTradeHandler->s_NextdataState = IdendificationState;
	return;
}


RequestStatus MonitorBlockRequestAnalyser(u32 Framecounter,u16 data, TradeHandler* s_Tradehandler){
		//Function which safes the received Pokemondata(Master) in a corresponding data structure

		if (Framecounter == 1){//ignore
		}
		else if( Framecounter == 2){
			if( data == 0x8888){
				s_Tradehandler->DataFieldActive = Active;
			}
			else{
				s_Tradehandler->DataFieldActive  = NoRequest;
			}
		}
		else{
			//printf("DF : %d ", s_Tradehandler.DataFieldActive);
			if ( s_Tradehandler->DataFieldActive == Active){

				switch(s_Tradehandler->BlockRequestSize){

				case BLOCK_REQ_SIZE_200 :{
					if ( s_Tradehandler->BufferIndex < 50 ){
						s_Tradehandler->PokemonTeam[s_Tradehandler->TeamIndex][s_Tradehandler->BufferIndex++] = data;
					}else if ((s_Tradehandler->BufferIndex >= 50) && (s_Tradehandler->BufferIndex < 100)){
						s_Tradehandler->PokemonTeam[s_Tradehandler->TeamIndex+1][(s_Tradehandler->BufferIndex++)-50] = data;
					}else{
						if( Framecounter == 9){
							s_Tradehandler->DataFieldActive  = NoRequest;
							s_Tradehandler->BufferIndex = 0;
							s_Tradehandler->TeamIndex = (s_Tradehandler->TeamIndex + 2);
							if(s_Tradehandler->TeamIndex > 5){
								s_Tradehandler->TeamIndex = 0;
							}
							printf("Block Analyser finished\n");
							return Granted;
						}
					}
				}break;
				case BLOCK_REQ_SIZE_100 : {
					if ( s_Tradehandler->BufferIndex < 50 ){
						s_Tradehandler->TrainerCard[s_Tradehandler->BufferIndex++] = data;
					}else{
						if( Framecounter == 9){
							s_Tradehandler->DataFieldActive  = NoRequest;
							s_Tradehandler->BufferIndex = 0;
							printf("Block Analyser finished\n");
							return Granted;
						}
					}
				}break;

				case BLOCK_REQ_SIZE_220 : {
					if(s_Tradehandler->BufferIndex < 110){
						s_Tradehandler->LetterBuffer[s_Tradehandler->BufferIndex++] = data;
					}else{
						if( Framecounter == 9){
							s_Tradehandler->DataFieldActive  = NoRequest;
							s_Tradehandler->BufferIndex= 0;
							printf("Block Analyser finished\n");
							return Granted;
						}
					}
				}break;
				case BLOCK_REQ_SIZE_40 : {
					if(s_Tradehandler->BufferIndex < 20){
						s_Tradehandler->RibbonsBuffer[s_Tradehandler->BufferIndex++] = data;
					}
					else{
						if( Framecounter == 9){
							s_Tradehandler->DataFieldActive  = NoRequest;
							s_Tradehandler->BufferIndex = 0;
							printf("Block Analyser finished\n");
							return Granted;
						}
					}
				}break;
				case BLOCK_SIZE_60 : {
					if(s_Tradehandler->BufferIndex < 30){
						s_Tradehandler->InitialBuffer[s_Tradehandler->BufferIndex++] = data;
					}
					else{
						if(Framecounter == 9){
							s_Tradehandler->DataFieldActive  = NoRequest;
							s_Tradehandler->BufferIndex = 0;
							printf("Block Analyser finished\n");
							return Granted;
						}
					}
				}break;
				case BLOCK_SIZE_20 : {
						if ( s_Tradehandler->BufferIndex < 10 ){
								s_Tradehandler->TradeCommandBuffer[s_Tradehandler->BufferIndex++] = data;
						}else{
							if( Framecounter == 9){
								s_Tradehandler->DataFieldActive  = NoRequest;
								s_Tradehandler->BufferIndex = 0;
								printf("Init Block Analyser Finished\n");
								return Granted;
							}
						}
				}break;
				default : {

				}break;
				}//end switch;
			}
		}
		return Pending;
	}




