#include <stdio.h>
#include "Includes/DataTypes.h"
#include <string.h>
#include <sqlite3.h>
#include "DatabaseHandler.h"


#define BUFFER_SIZE 50

void DatabaseInit(){
    sqlite3 *db;
    char *zErrMsg = 0;
    int ret;

    // Open database, create it if it doesn't exist
    ret = sqlite3_open("/home/petalinux/database/Pokemon.db", &db);

    if (ret) {
        fprintf(stderr, "Can't open database: %s\n", sqlite3_errmsg(db));
        return;
    } else {
        fprintf(stderr, "Opened database successfully\n");
    }
    const char *PokemonName = "Brutalanda";

    create_table(db, PokemonName);

    // Close database
    sqlite3_close(db);

    return;
}



int DataBaseInsertBuffer(sqlite3 *db,const char *Tablename,u16* buffer){

    // Open SQLite database or create if not exists
    int rc;

    char sql_insert[100];

    snprintf(sql_insert, sizeof(sql_insert), "INSERT INTO %s (value) VALUES (?)", Tablename);
    // Insert buffer data into SQLite database
    //char *sql_insert = "INSERT INTO buffer_data (value) VALUES (?)";
    sqlite3_stmt *stmt;
    int rc = sqlite3_prepare_v2(db, sql_insert, -1, &stmt, 0);
    if (rc != SQLITE_OK) {
        fprintf(stderr, "SQL error: %s\n", sqlite3_errmsg(db));
        sqlite3_close(db);
        return 1;
    }

    // Bind and insert data into the database
    for (int i = 0; i < BUFFER_SIZE; ++i) {
        sqlite3_bind_int(stmt, 1, buffer[i]);
        rc = sqlite3_step(stmt);
        if (rc != SQLITE_DONE) {
            fprintf(stderr, "SQL error: %s\n", sqlite3_errmsg(db));
            sqlite3_close(db);
            return 1;
        }
        sqlite3_reset(stmt);
    }

    // Finalize and close database connection
    sqlite3_finalize(stmt);
    sqlite3_close(db);

    printf("Data inserted successfully\n");
    return 0;
}


int DataBaseReadBuffer(sqlite3 *db,u16 *buffer, const char *table_name){
    // Prepare SQL statement to select data
    char sql_select[100];
    snprintf(sql_select, sizeof(sql_select), "SELECT value FROM %s", table_name);
    sqlite3_stmt *stmt;
    int rc = sqlite3_prepare_v2(db, sql_select, -1, &stmt, 0);
    if (rc != SQLITE_OK) {
        fprintf(stderr, "SQL error: %s\n", sqlite3_errmsg(db));
        sqlite3_close(db);
        return 1;
    }

    int index = 0;

    // Retrieve data and store in buffer
    while (sqlite3_step(stmt) == SQLITE_ROW && index < BUFFER_SIZE) {
        buffer[index++] = sqlite3_column_int(stmt, 0);
    }

    // Finalize statement and close database connection
    sqlite3_finalize(stmt);

    // Display retrieved data
    printf("Retrieved data from database:\n");
    for (int i = 0; i < index; ++i) {
        printf("%04x ", buffer[i]);
    }
    printf("\n");

    return 0;
}

int create_table(sqlite3 *db, const char *table_name) {
    char *err_msg = 0;

    // Prepare SQL statement to create a new table
    char sql_create_table[100];
    snprintf(sql_create_table, sizeof(sql_create_table), "CREATE TABLE IF NOT EXISTS %s (id INTEGER PRIMARY KEY, value INTEGER)", table_name);
    int rc = sqlite3_exec(db, sql_create_table, 0, 0, &err_msg);
    if (rc != SQLITE_OK) {
        fprintf(stderr, "SQL error: %s\n", err_msg);
        sqlite3_free(err_msg);
        return 1;
    }

    printf("Table '%s' created successfully\n", table_name);
    return 0;
}

