#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>
#include <sys/mman.h>
#include <fcntl.h>


#define ADDRESS_PL_TO_PS 0x41200000

#define ADDRESS_PS_TO_PL 0x41210000
void usage(char *prog)
{
	printf("usage: %s ADDR\n",prog);
	printf("\n");
	printf("ADDR may be specified as hex values\n");
}

uint32_t ReadPltoPsBuffer(void){
	int fd;
	void *ptr;
	uint32_t addr = ADDRESS_PL_TO_PS;
	unsigned page_addr, page_offset;
	unsigned page_size=sysconf(_SC_PAGESIZE);
	fd=open("/dev/mem",O_RDONLY);
		if(fd<1) {
			perror("Can't open fd in ReadPltoPsBuffer\n");
			exit(-1);
	}
	page_addr=(addr & ~(page_size-1));
	page_offset=addr-page_addr;
	ptr=mmap(NULL,page_size,PROT_READ,MAP_SHARED,fd,(addr & ~(page_size-1)));
	if((int)ptr==-1) {
		perror("mmap Error\n");
		exit(-1);
	}
	printf("0x%08x\n",*((unsigned *)(ptr+page_offset)));
	return *((unsigned *)(ptr+page_offset));

}

void WritePStoPLBffer(uint32_t value)
{
	int fd;
	void *ptr;
	uint32_t addr = ADDRESS_PL_TO_PS
	unsigned addr, page_addr, page_offset;
	unsigned page_size=sysconf(_SC_PAGESIZE);

	fd=open("/dev/mem",O_RDWR);
	if(fd<1) {
		perror(argv[0]);
		exit(-1);
	}

	if(argc!=3) {
		usage(argv[0]);
		exit(-1);
	}

	addr=strtoul(argv[1],NULL,0);
	val=strtoul(argv[2],NULL,0);

	page_addr=(addr & ~(page_size-1));
	page_offset=addr-page_addr;

	ptr=mmap(NULL,page_size,PROT_READ|PROT_WRITE,MAP_SHARED,fd,(addr & ~(page_size-1)));
	if((int)ptr==-1) {
		perror(argv[0]);
		exit(-1);
	}

	*((unsigned *)(ptr+page_offset))=val;
	return 0;
}

int main(int argc, char *argv[])
{
/*	int fd;
	void *ptr;
	unsigned addr, page_addr, page_offset;
	unsigned page_size=sysconf(_SC_PAGESIZE);
	printf("Pagesize %d \n",page_size);

	if(argc!=2) {
		usage(argv[0]);
		exit(-1);
	}

	fd=open("/dev/mem",O_RDONLY);
	if(fd<1) {
		perror(argv[0]);
		exit(-1);
	}

	addr= ADDRESS;
	page_addr=(addr & ~(page_size-1));
	page_offset=addr-page_addr;
	printf("Page Addr : %08x  Page offset : %08x \n",page_addr,page_offset);
		ptr=mmap(NULL,page_size,PROT_READ,MAP_SHARED,fd,(addr & ~(page_size-1)));
		if((int)ptr==-1) {
			perror(argv[0]);
			exit(-1);
		}

		printf("0x%08x\n",*((unsigned *)(ptr+page_offset)));*/

	uint32_t PLtoPSBuffer_Value = ReadPltoPsBuffer();

	printf("PltoPSBuffer Value : %08x\n",PLtoPSBuffer_Value);

	return 0;
}
